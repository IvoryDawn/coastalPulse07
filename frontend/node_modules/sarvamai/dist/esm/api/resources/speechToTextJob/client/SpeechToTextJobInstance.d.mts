/**
 * This file was auto-generated by Fern from our API Definition.
 */
import * as SarvamAI from "../../../index.mjs";
import { SpeechToTextJob } from "./Client.mjs";
export declare class SpeechToTextJobInstance {
    private _jobId;
    private _client;
    constructor(jobId: string, client: SpeechToTextJob);
    /**
     * Returns the job ID associated with this job instance.
     */
    get jobId(): string;
    /**
     * Upload input audio files for the speech-to-text job.
     *
     * @param filePaths - Array of full paths to local audio files
     * @param timeoutInSeconds - The maximum time to wait for the upload to complete (default: 60)
     * @returns Promise<boolean> - True if all files are uploaded successfully
     */
    uploadFiles(filePaths: string[], timeoutInSeconds?: number): Promise<boolean>;
    /**
     * Polls job status until it completes or fails.
     *
     * @param pollIntervalSeconds - Time in seconds between polling attempts (default: 5)
     * @param timeoutSeconds - Maximum time to wait for completion in seconds (default: 600)
     * @returns Promise<SarvamAI.JobStatusV1Response> - Final job status
     * @throws Error if the job does not complete within the given timeout
     */
    waitUntilComplete(pollIntervalSeconds?: number, timeoutSeconds?: number): Promise<SarvamAI.JobStatusV1Response>;
    /**
     * Get the mapping of input files to their corresponding output files.
     *
     * @returns Promise<Array<{input_file: string, output_file: string}>> - List of mappings
     */
    getOutputMappings(): Promise<Array<{
        input_file: string;
        output_file: string;
    }>>;
    /**
     * Download output files to the specified directory.
     *
     * @param outputDir - Local directory where outputs will be saved
     * @returns Promise<boolean> - True if all files downloaded successfully
     * @throws Error if a file fails to download
     */
    downloadOutputs(outputDir: string): Promise<boolean>;
    /**
     * Retrieve the current status of the job.
     */
    getStatus(): Promise<SarvamAI.JobStatusV1Response>;
    /**
     * Start the speech-to-text job processing.
     */
    start(): Promise<SarvamAI.JobStatusV1Response>;
    /**
     * Check if the job exists in the system.
     */
    exists(): Promise<boolean>;
    /**
     * Check if the job is either completed or failed.
     */
    isComplete(): Promise<boolean>;
    /**
     * Check if the job completed successfully.
     */
    isSuccessful(): Promise<boolean>;
    /**
     * Check if the job has failed.
     */
    isFailed(): Promise<boolean>;
    private getMimeType;
}
