/**
 * This file was auto-generated by Fern from our API Definition.
 */
import * as environments from "../../../../environments.mjs";
import * as core from "../../../../core/index.mjs";
import * as SarvamAI from "../../../index.mjs";
import { SpeechToTextJobInstance } from "./SpeechToTextJobInstance.mjs";
export declare namespace SpeechToTextJob {
    interface Options {
        environment?: core.Supplier<environments.SarvamAIEnvironment | environments.SarvamAIEnvironmentUrls>;
        /** Specify a custom URL to connect the client to. */
        baseUrl?: core.Supplier<string>;
        apiSubscriptionKey?: core.Supplier<string>;
        /** Additional headers to include in requests. */
        headers?: Record<string, string | core.Supplier<string | undefined> | undefined>;
    }
    interface RequestOptions {
        /** The maximum time to wait for a response in seconds. */
        timeoutInSeconds?: number;
        /** The number of times to retry the request. Defaults to 2. */
        maxRetries?: number;
        /** A hook to abort the request. */
        abortSignal?: AbortSignal;
        /** Additional headers to include in the request. */
        headers?: Record<string, string | core.Supplier<string | undefined> | undefined>;
    }
}
export declare class SpeechToTextJob {
    protected readonly _options: SpeechToTextJob.Options;
    constructor(_options?: SpeechToTextJob.Options);
    /**
     * Get a job uuid, and storage folder details for speech to text bulk job v1
     *
     * @param {SarvamAI.SpeechToTextJobRequest} request
     * @param {SpeechToTextJob.RequestOptions} requestOptions - Request-specific configuration.
     *
     * @throws {@link SarvamAI.BadRequestError}
     * @throws {@link SarvamAI.ForbiddenError}
     * @throws {@link SarvamAI.UnprocessableEntityError}
     * @throws {@link SarvamAI.TooManyRequestsError}
     * @throws {@link SarvamAI.InternalServerError}
     * @throws {@link SarvamAI.ServiceUnavailableError}
     *
     * @example
     *     await client.speechToTextJob.initialise({
     *         job_parameters: {}
     *     })
     */
    initialise(request: SarvamAI.SpeechToTextJobRequest, requestOptions?: SpeechToTextJob.RequestOptions): core.HttpResponsePromise<SarvamAI.BulkJobInitResponseV1>;
    private __initialise;
    /**
     * Get the status of a speech to text bulk job V1
     *
     * @param {string} jobId - The unique identifier of the job
     * @param {SpeechToTextJob.RequestOptions} requestOptions - Request-specific configuration.
     *
     * @throws {@link SarvamAI.BadRequestError}
     * @throws {@link SarvamAI.ForbiddenError}
     * @throws {@link SarvamAI.UnprocessableEntityError}
     * @throws {@link SarvamAI.TooManyRequestsError}
     * @throws {@link SarvamAI.InternalServerError}
     * @throws {@link SarvamAI.ServiceUnavailableError}
     *
     * @example
     *     await client.speechToTextJob.getStatus("job_id")
     */
    getStatus(jobId: string, requestOptions?: SpeechToTextJob.RequestOptions): core.HttpResponsePromise<SarvamAI.JobStatusV1Response>;
    private __getStatus;
    /**
     * Start a speech to text bulk job V1
     *
     * @param {string} jobId - The unique identifier of the job
     * @param {SarvamAI.SpeechToTextJobStartRequest} request
     * @param {SpeechToTextJob.RequestOptions} requestOptions - Request-specific configuration.
     *
     * @throws {@link SarvamAI.BadRequestError}
     * @throws {@link SarvamAI.ForbiddenError}
     * @throws {@link SarvamAI.UnprocessableEntityError}
     * @throws {@link SarvamAI.TooManyRequestsError}
     * @throws {@link SarvamAI.InternalServerError}
     * @throws {@link SarvamAI.ServiceUnavailableError}
     *
     * @example
     *     await client.speechToTextJob.start("job_id")
     */
    start(jobId: string, request?: SarvamAI.SpeechToTextJobStartRequest, requestOptions?: SpeechToTextJob.RequestOptions): core.HttpResponsePromise<SarvamAI.JobStatusV1Response>;
    private __start;
    /**
     * Start a speech to text bulk job V1
     *
     * @param {SarvamAI.FilesRequest} request
     * @param {SpeechToTextJob.RequestOptions} requestOptions - Request-specific configuration.
     *
     * @throws {@link SarvamAI.BadRequestError}
     * @throws {@link SarvamAI.ForbiddenError}
     * @throws {@link SarvamAI.UnprocessableEntityError}
     * @throws {@link SarvamAI.TooManyRequestsError}
     * @throws {@link SarvamAI.InternalServerError}
     * @throws {@link SarvamAI.ServiceUnavailableError}
     *
     * @example
     *     await client.speechToTextJob.getUploadLinks({
     *         job_id: "job_id",
     *         files: ["files"]
     *     })
     */
    getUploadLinks(request: SarvamAI.FilesRequest, requestOptions?: SpeechToTextJob.RequestOptions): core.HttpResponsePromise<SarvamAI.FilesUploadResponse>;
    private __getUploadLinks;
    /**
     * Start a speech to text bulk job V1
     *
     * @param {SarvamAI.FilesRequest} request
     * @param {SpeechToTextJob.RequestOptions} requestOptions - Request-specific configuration.
     *
     * @throws {@link SarvamAI.BadRequestError}
     * @throws {@link SarvamAI.ForbiddenError}
     * @throws {@link SarvamAI.UnprocessableEntityError}
     * @throws {@link SarvamAI.TooManyRequestsError}
     * @throws {@link SarvamAI.InternalServerError}
     * @throws {@link SarvamAI.ServiceUnavailableError}
     *
     * @example
     *     await client.speechToTextJob.getDownloadLinks({
     *         job_id: "job_id",
     *         files: ["files"]
     *     })
     */
    getDownloadLinks(request: SarvamAI.FilesRequest, requestOptions?: SpeechToTextJob.RequestOptions): core.HttpResponsePromise<SarvamAI.FilesDownloadResponse>;
    private __getDownloadLinks;
    /**
     * Create a new Speech-to-Text bulk job.
     *
     * @param model - The model to use for transcription (default: "saarika:v2.5")
     * @param withDiarization - Whether to enable speaker diarization (default: false)
     * @param withTimestamps - Whether to include word-level timestamps (default: false)
     * @param languageCode - The language code of the input audio (e.g., "hi-IN", "bn-IN")
     * @param numSpeakers - The number of distinct speakers in the audio, if known
     * @param callback - Optional callback configuration to receive job completion events
     * @param requestOptions - Request-specific configuration
     * @returns A handle to the newly created Speech-to-Text job
     */
    createJob(model?: SarvamAI.SpeechToTextModel, withDiarization?: boolean, withTimestamps?: boolean, languageCode?: SarvamAI.SpeechToTextLanguage, numSpeakers?: number, callback?: SarvamAI.BulkJobCallback, requestOptions?: SpeechToTextJob.RequestOptions): Promise<SpeechToTextJobInstance>;
    /**
     * Get an existing Speech-to-Text job handle by job ID.
     *
     * @param jobId - The job ID of the previously created Speech-to-Text job
     * @returns A job handle which can be used to check status or retrieve results
     */
    getJob(jobId: string): SpeechToTextJobInstance;
    protected _getCustomAuthorizationHeaders(): Promise<{
        "api-subscription-key": string | undefined;
    }>;
}
